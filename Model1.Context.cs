//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Universal_Task.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UniversalEntities : DbContext
    {
        public UniversalEntities()
            : base("name=UniversalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ProfessionalDetail_Table> ProfessionalDetail_Table { get; set; }
        public virtual DbSet<Login_Table> Login_Table { get; set; }
        public virtual DbSet<City_Table> City_Table { get; set; }
        public virtual DbSet<Employee_Table> Employee_Table { get; set; }
        public virtual DbSet<State_Table> State_Table { get; set; }
        public virtual DbSet<final_View> final_View { get; set; }
    
        public virtual int AddEmployee(string userName, string address, Nullable<int> city, string state, Nullable<System.DateTime> doB, string uniqueCode, Nullable<System.DateTime> date, byte[] image, string password, Nullable<int> cityId)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var doBParameter = doB.HasValue ?
                new ObjectParameter("DoB", doB) :
                new ObjectParameter("DoB", typeof(System.DateTime));
    
            var uniqueCodeParameter = uniqueCode != null ?
                new ObjectParameter("UniqueCode", uniqueCode) :
                new ObjectParameter("UniqueCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmployee", userNameParameter, addressParameter, cityParameter, stateParameter, doBParameter, uniqueCodeParameter, dateParameter, imageParameter, passwordParameter, cityIdParameter);
        }
    
        public virtual int DeleteEmployee(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", empIdParameter);
        }
    
        public virtual ObjectResult<GetAllEmployees_Result> GetAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployees_Result>("GetAllEmployees");
        }
    
        public virtual ObjectResult<GetEmployeeById_Result> GetEmployeeById(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeById_Result>("GetEmployeeById", empIdParameter);
        }
    
        public virtual int UpdateEmployee(Nullable<int> empId, string userName, string address, Nullable<int> city, string state, Nullable<System.DateTime> doB, string uniqueCode, Nullable<System.DateTime> date, byte[] image, string password, Nullable<int> cityId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city.HasValue ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var doBParameter = doB.HasValue ?
                new ObjectParameter("DoB", doB) :
                new ObjectParameter("DoB", typeof(System.DateTime));
    
            var uniqueCodeParameter = uniqueCode != null ?
                new ObjectParameter("UniqueCode", uniqueCode) :
                new ObjectParameter("UniqueCode", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", empIdParameter, userNameParameter, addressParameter, cityParameter, stateParameter, doBParameter, uniqueCodeParameter, dateParameter, imageParameter, passwordParameter, cityIdParameter);
        }
    }
}
